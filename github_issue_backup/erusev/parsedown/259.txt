{
  "url": "https://api.github.com/repos/erusev/parsedown/issues/259",
  "labels_url": "https://api.github.com/repos/erusev/parsedown/issues/259/labels{/name}",
  "comments_url": "https://api.github.com/repos/erusev/parsedown/issues/259/comments",
  "events_url": "https://api.github.com/repos/erusev/parsedown/issues/259/events",
  "html_url": "https://github.com/erusev/parsedown/issues/259",
  "id": 53960939,
  "number": 259,
  "title": "Handling of Invalid HTML",
  "user": {
    "login": "pchri",
    "id": 10464186,
    "avatar_url": "https://avatars.githubusercontent.com/u/10464186?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pchri",
    "html_url": "https://github.com/pchri",
    "followers_url": "https://api.github.com/users/pchri/followers",
    "following_url": "https://api.github.com/users/pchri/following{/other_user}",
    "gists_url": "https://api.github.com/users/pchri/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pchri/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pchri/subscriptions",
    "organizations_url": "https://api.github.com/users/pchri/orgs",
    "repos_url": "https://api.github.com/users/pchri/repos",
    "events_url": "https://api.github.com/users/pchri/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pchri/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "url": "https://api.github.com/repos/erusev/parsedown/labels/suggestion",
      "name": "suggestion",
      "color": "bfd4f2"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "milestone": null,
  "comments": 6,
  "created_at": "2015-01-10T15:16:03Z",
  "updated_at": "2015-01-14T15:39:32Z",
  "closed_at": null,
  "body": "\r\nI want to use Parsedown on a site that I run for a small group of people. Currently the users can write plain text messages on the site, but I would like to use Parsedown to allow them to make the text look a little more interesting. However, obviously I have no control over what the users write, but I would like to have control over what HTML gets generated so that it doesn't break the rest of the site.\r\n\r\nMy problem is, that the users might try to add HTML to their text. And that it is not necessarily valid HTML.\r\n\r\nFor the input\r\n\r\n    <div><p>\r\n\r\nParsedown generates\r\n\r\n    <p><div><p></p>\r\n\r\nObviously this is illegal HTML in any context (paragraph inside paragraph), but it also leaves an open div-element that will break the layout of the rest of my site.\r\n\r\n(The simpler case with just the div start element is not such a big problem, because browsers will close the div when they see the paragraph end element)\r\n\r\nI know that no sane person would write this input, but I still think that Parsedown should generate valid HTML for any input.\r\n\r\nI have found a site that [compares the HTML generated by various Markdown implemetations](http://johnmacfarlane.net/babelmark2/?normalize=1&text=%3Cdiv%3E%3Cp%3E), and this shows that almost none of the tested implementations get it right.\r\n\r\nCurrently my workaround is to feed the output of Parsedown into an XML parser, and print it back out. This ensures that there are no open tags, but I have very little control. Another possible workaround could be to use javascript to add the generated HTML to the innerHTML of a div element, but again I feel this shouldn't be necessary.\r\n",
  "closed_by": null
}
BODY STARTS FROM HERE
[
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/69459471",
    "html_url": "https://github.com/erusev/parsedown/issues/259#issuecomment-69459471",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/259",
    "id": 69459471,
    "user": {
      "login": "erusev",
      "id": 184170,
      "avatar_url": "https://avatars.githubusercontent.com/u/184170?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erusev",
      "html_url": "https://github.com/erusev",
      "followers_url": "https://api.github.com/users/erusev/followers",
      "following_url": "https://api.github.com/users/erusev/following{/other_user}",
      "gists_url": "https://api.github.com/users/erusev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erusev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erusev/subscriptions",
      "organizations_url": "https://api.github.com/users/erusev/orgs",
      "repos_url": "https://api.github.com/users/erusev/repos",
      "events_url": "https://api.github.com/users/erusev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erusev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-10T15:28:32Z",
    "updated_at": "2015-01-10T15:28:32Z",
    "body": "What is the output that you'd expect?"
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/69475677",
    "html_url": "https://github.com/erusev/parsedown/issues/259#issuecomment-69475677",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/259",
    "id": 69475677,
    "user": {
      "login": "pchri",
      "id": 10464186,
      "avatar_url": "https://avatars.githubusercontent.com/u/10464186?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchri",
      "html_url": "https://github.com/pchri",
      "followers_url": "https://api.github.com/users/pchri/followers",
      "following_url": "https://api.github.com/users/pchri/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchri/subscriptions",
      "organizations_url": "https://api.github.com/users/pchri/orgs",
      "repos_url": "https://api.github.com/users/pchri/repos",
      "events_url": "https://api.github.com/users/pchri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-10T22:58:05Z",
    "updated_at": "2015-01-10T22:58:32Z",
    "body": "Ah, yes I should have stated that in my first post...\r\n\r\nActually I'm not so fuzzy about that. \r\n\r\nI would consider an empty output as perfectly acceptable, but I would like to see something like\r\n\r\n    <div><p></p></div>\r\n\r\nor\r\n\r\n    <p></p><div><p></p></div>\r\n\r\nI.e. close any open tags.\r\n\r\nAnother problem is when the source tries to close tags that are not open, i.e.\r\n\r\n    </div>\r\n\r\nThe current output is\r\n\r\n    <p></div></p>\r\n\r\nwhich is not good. Again I'm not particularly fuzzy about the output as long as it is valid. I would accept an empty output, or any of\r\n\r\n    <p></p>\r\n    <p><div></div></p>\r\n    <p>&lt;/div&gt;</p>\r\n\r\nI really appreciate, that you take time to look at this."
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/69476613",
    "html_url": "https://github.com/erusev/parsedown/issues/259#issuecomment-69476613",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/259",
    "id": 69476613,
    "user": {
      "login": "smz",
      "id": 552475,
      "avatar_url": "https://avatars.githubusercontent.com/u/552475?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smz",
      "html_url": "https://github.com/smz",
      "followers_url": "https://api.github.com/users/smz/followers",
      "following_url": "https://api.github.com/users/smz/following{/other_user}",
      "gists_url": "https://api.github.com/users/smz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smz/subscriptions",
      "organizations_url": "https://api.github.com/users/smz/orgs",
      "repos_url": "https://api.github.com/users/smz/repos",
      "events_url": "https://api.github.com/users/smz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-10T23:29:28Z",
    "updated_at": "2015-01-10T23:30:00Z",
    "body": "@pchri \r\n\r\n>... but I still think that Parsedown should generate valid HTML for any input.\r\n\r\nI'm afraid your expectations far exceeds what is reasonable to expect: Parsedown will generate valid HTML from **markdown** that it is feed of, but you can't expect it to be a magic wand fixing invalid HTML.\r\n\r\nMy personal advice in your case would be to sanitize user input by stripping **any** HTML before passing it to Markdown.\r\n\r\nLoooooong decades ago, when I first approached programming, I learned about an acronym that I think still holds: GIGO (Garbage In - Garbage Out) :stuck_out_tongue_winking_eye: \r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/69491041",
    "html_url": "https://github.com/erusev/parsedown/issues/259#issuecomment-69491041",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/259",
    "id": 69491041,
    "user": {
      "login": "hkdobrev",
      "id": 506129,
      "avatar_url": "https://avatars.githubusercontent.com/u/506129?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkdobrev",
      "html_url": "https://github.com/hkdobrev",
      "followers_url": "https://api.github.com/users/hkdobrev/followers",
      "following_url": "https://api.github.com/users/hkdobrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkdobrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkdobrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkdobrev/subscriptions",
      "organizations_url": "https://api.github.com/users/hkdobrev/orgs",
      "repos_url": "https://api.github.com/users/hkdobrev/repos",
      "events_url": "https://api.github.com/users/hkdobrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkdobrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T11:22:41Z",
    "updated_at": "2015-01-11T11:22:41Z",
    "body": "Even if Parsedown does improve the validity of the output a bit in these, it cannot be enough for you. It is not hard at all with Markdown to generate input which would be either invalid or unspecified. You could use HTMLTidy to literally \"tidy\" the output. It has quite good options for invalid HTML, empty elements, blacklisting and whitelisting etc. And even if Parsedown does indeed output correct HTML, it would not be in its current scope to blacklist iframes for example."
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/69497177",
    "html_url": "https://github.com/erusev/parsedown/issues/259#issuecomment-69497177",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/259",
    "id": 69497177,
    "user": {
      "login": "pchri",
      "id": 10464186,
      "avatar_url": "https://avatars.githubusercontent.com/u/10464186?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchri",
      "html_url": "https://github.com/pchri",
      "followers_url": "https://api.github.com/users/pchri/followers",
      "following_url": "https://api.github.com/users/pchri/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchri/subscriptions",
      "organizations_url": "https://api.github.com/users/pchri/orgs",
      "repos_url": "https://api.github.com/users/pchri/repos",
      "events_url": "https://api.github.com/users/pchri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T14:58:39Z",
    "updated_at": "2015-01-11T14:58:39Z",
    "body": "@smz\r\nI don't necessarily expect parsedown to fix the HTML input. It can ignore the html or treat it as text and generate html-entities for it for all I care. My last example shows just that. So I don't expect parsedown to fix the html, but I still expect the output to be valid.\r\n\r\nI am familiar with GIGO, but having a background that includes compiler construction I have always felt that GIGO is a sign of low quality in software. (I'm **not** saying that parsedown is low quality. It is free, and easy to use and it does what it says on the package and I can work around the problems I encounter). Imagine a compiler (or interpreter) for a programming language. GIGO allows the compiler to erase the entire harddisk when it encounters a syntax error. A good compiler produces a helpful error message and does *not* generate false code.\r\n\r\nI guess I see parsedown as a compiler translating markdown to HTML and I would actually also be happy if parsedown gave me an error indication on the invalid input.\r\n\r\n@hkdobrev \r\nUnfortunately my hosting service does not support HTMLTidy or the PHP Tidy extension. As stated I use an XML parser to do some tidying up, and it would be fairly easy for me to blacklist iframes in that context if I wanted that.\r\n\r\nAnyway, thank you for your time."
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/69498322",
    "html_url": "https://github.com/erusev/parsedown/issues/259#issuecomment-69498322",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/259",
    "id": 69498322,
    "user": {
      "login": "smz",
      "id": 552475,
      "avatar_url": "https://avatars.githubusercontent.com/u/552475?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smz",
      "html_url": "https://github.com/smz",
      "followers_url": "https://api.github.com/users/smz/followers",
      "following_url": "https://api.github.com/users/smz/following{/other_user}",
      "gists_url": "https://api.github.com/users/smz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smz/subscriptions",
      "organizations_url": "https://api.github.com/users/smz/orgs",
      "repos_url": "https://api.github.com/users/smz/repos",
      "events_url": "https://api.github.com/users/smz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-11T15:33:40Z",
    "updated_at": "2015-01-11T15:33:40Z",
    "body": "@pchri \r\n> I guess I see parsedown as a compiler translating markdown to HTML and I would actually also be happy if parsedown gave me an error indication on the invalid input.\r\n\r\nThat's correct. But to achieve what you are expecting Parsedown should also be able to parse HTML (to judge on its validity) and this, I think, is beyond its scope."
  }
]
