{
  "url": "https://api.github.com/repos/erusev/parsedown/issues/229",
  "labels_url": "https://api.github.com/repos/erusev/parsedown/issues/229/labels{/name}",
  "comments_url": "https://api.github.com/repos/erusev/parsedown/issues/229/comments",
  "events_url": "https://api.github.com/repos/erusev/parsedown/issues/229/events",
  "html_url": "https://github.com/erusev/parsedown/issues/229",
  "id": 44673471,
  "number": 229,
  "title": "Disable parsing of specific elements",
  "user": {
    "login": "IlanF",
    "id": 5628089,
    "avatar_url": "https://avatars.githubusercontent.com/u/5628089?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/IlanF",
    "html_url": "https://github.com/IlanF",
    "followers_url": "https://api.github.com/users/IlanF/followers",
    "following_url": "https://api.github.com/users/IlanF/following{/other_user}",
    "gists_url": "https://api.github.com/users/IlanF/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/IlanF/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/IlanF/subscriptions",
    "organizations_url": "https://api.github.com/users/IlanF/orgs",
    "repos_url": "https://api.github.com/users/IlanF/repos",
    "events_url": "https://api.github.com/users/IlanF/events{/privacy}",
    "received_events_url": "https://api.github.com/users/IlanF/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "milestone": null,
  "comments": 4,
  "created_at": "2014-10-02T11:05:32Z",
  "updated_at": "2015-02-24T17:41:32Z",
  "closed_at": "2015-01-15T03:03:23Z",
  "body": "I'm working on a comment section for my website and I parse it with Parsedown.\r\nBut the thing is that I want to disallow posting of some elements, specifically images, headers and tables.\r\nAnyway I can do this with Parsedown?",
  "closed_by": {
    "login": "erusev",
    "id": 184170,
    "avatar_url": "https://avatars.githubusercontent.com/u/184170?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/erusev",
    "html_url": "https://github.com/erusev",
    "followers_url": "https://api.github.com/users/erusev/followers",
    "following_url": "https://api.github.com/users/erusev/following{/other_user}",
    "gists_url": "https://api.github.com/users/erusev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/erusev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/erusev/subscriptions",
    "organizations_url": "https://api.github.com/users/erusev/orgs",
    "repos_url": "https://api.github.com/users/erusev/repos",
    "events_url": "https://api.github.com/users/erusev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/erusev/received_events",
    "type": "User",
    "site_admin": false
  }
}
BODY STARTS FROM HERE
[
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/57615901",
    "html_url": "https://github.com/erusev/parsedown/issues/229#issuecomment-57615901",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/229",
    "id": 57615901,
    "user": {
      "login": "hkdobrev",
      "id": 506129,
      "avatar_url": "https://avatars.githubusercontent.com/u/506129?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkdobrev",
      "html_url": "https://github.com/hkdobrev",
      "followers_url": "https://api.github.com/users/hkdobrev/followers",
      "following_url": "https://api.github.com/users/hkdobrev/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkdobrev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkdobrev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkdobrev/subscriptions",
      "organizations_url": "https://api.github.com/users/hkdobrev/orgs",
      "repos_url": "https://api.github.com/users/hkdobrev/repos",
      "events_url": "https://api.github.com/users/hkdobrev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkdobrev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-02T11:41:56Z",
    "updated_at": "2014-10-02T11:41:56Z",
    "body": "You could create an extension of Parsedown (just another class extending Parsedown) and you could override the protected methods like `identifyTable` to return `NULL`."
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/57616834",
    "html_url": "https://github.com/erusev/parsedown/issues/229#issuecomment-57616834",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/229",
    "id": 57616834,
    "user": {
      "login": "IlanF",
      "id": 5628089,
      "avatar_url": "https://avatars.githubusercontent.com/u/5628089?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IlanF",
      "html_url": "https://github.com/IlanF",
      "followers_url": "https://api.github.com/users/IlanF/followers",
      "following_url": "https://api.github.com/users/IlanF/following{/other_user}",
      "gists_url": "https://api.github.com/users/IlanF/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IlanF/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IlanF/subscriptions",
      "organizations_url": "https://api.github.com/users/IlanF/orgs",
      "repos_url": "https://api.github.com/users/IlanF/repos",
      "events_url": "https://api.github.com/users/IlanF/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IlanF/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-02T11:53:20Z",
    "updated_at": "2014-10-02T11:53:20Z",
    "body": "Thanks I will do that.\r\nAs for the images I found an elegant solution, I do a simple preg_replace and change images to links before saving the comment to the database. Needs some testing to make sure that the regex works properly, but it is better than ignoring it"
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/70033239",
    "html_url": "https://github.com/erusev/parsedown/issues/229#issuecomment-70033239",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/229",
    "id": 70033239,
    "user": {
      "login": "erusev",
      "id": 184170,
      "avatar_url": "https://avatars.githubusercontent.com/u/184170?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/erusev",
      "html_url": "https://github.com/erusev",
      "followers_url": "https://api.github.com/users/erusev/followers",
      "following_url": "https://api.github.com/users/erusev/following{/other_user}",
      "gists_url": "https://api.github.com/users/erusev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/erusev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/erusev/subscriptions",
      "organizations_url": "https://api.github.com/users/erusev/orgs",
      "repos_url": "https://api.github.com/users/erusev/repos",
      "events_url": "https://api.github.com/users/erusev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/erusev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-15T03:03:23Z",
    "updated_at": "2015-01-15T03:03:23Z",
    "body": "I'm closing this."
  },
  {
    "url": "https://api.github.com/repos/erusev/parsedown/issues/comments/75805546",
    "html_url": "https://github.com/erusev/parsedown/issues/229#issuecomment-75805546",
    "issue_url": "https://api.github.com/repos/erusev/parsedown/issues/229",
    "id": 75805546,
    "user": {
      "login": "moldcraft",
      "id": 1475489,
      "avatar_url": "https://avatars.githubusercontent.com/u/1475489?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moldcraft",
      "html_url": "https://github.com/moldcraft",
      "followers_url": "https://api.github.com/users/moldcraft/followers",
      "following_url": "https://api.github.com/users/moldcraft/following{/other_user}",
      "gists_url": "https://api.github.com/users/moldcraft/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moldcraft/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moldcraft/subscriptions",
      "organizations_url": "https://api.github.com/users/moldcraft/orgs",
      "repos_url": "https://api.github.com/users/moldcraft/repos",
      "events_url": "https://api.github.com/users/moldcraft/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moldcraft/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-24T17:41:31Z",
    "updated_at": "2015-02-24T17:41:31Z",
    "body": "May be useful for somebody: I also use Parsedown for user comments and I wanted to replace all `h1`, `h2`, `h3` with `h4` to prevent SEO warnings (for e.g. only one `h1` must be on the page), here is my Symfony2 service\r\n\r\n```php\r\n<?php\r\n\r\nnamespace App\\MainBundle\\Service;\r\n\r\nuse Parsedown;\r\nuse HTMLPurifier;\r\nuse Emojione\\Emojione;\r\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\r\n\r\nclass Markdown extends Parsedown\r\n{\r\n    /**\r\n     * @var HTMLPurifier\r\n     */\r\n    private $purifier;\r\n\r\n    public function __construct(ContainerInterface $container)\r\n    {\r\n        $this->setMarkupEscaped(true);\r\n\r\n        {\r\n            $purifierConfig = array(\r\n                'HTML.ForbiddenElements' => array('h1', 'h2', 'h3'),\r\n                'HTML.ForbiddenAttributes' => array('style', 'onclick',),\r\n                'HTML.TargetBlank' => true,\r\n            );\r\n\r\n            $this->purifier = new HTMLPurifier($purifierConfig);\r\n        }\r\n\r\n        {\r\n            Emojione::$imageType = 'svg';\r\n            Emojione::$sprites = true;\r\n            Emojione::$imagePathSVGSprites = $container->get('templating.helper.assets')->getUrl(\r\n                'bundles/appmain/emojione/sprites/emojione.sprites.svg'\r\n            );\r\n            Emojione::$ascii = true;\r\n        }\r\n    }\r\n\r\n    function text($raw)\r\n    {\r\n        return Emojione::shortnameToImage(\r\n            $this->purifier->purify(\r\n                parent::text($raw)\r\n            )\r\n        );\r\n    }\r\n\r\n    private function safeHeader($Block)\r\n    {\r\n        if ($Block && isset($Block['element'])) {\r\n            /**\r\n             * Change h1, h2, h3 to h4\r\n             */\r\n            if (in_array($Block['element']['name'], array('h1', 'h2', 'h3'))) {\r\n                $Block['element']['name'] = 'h4';\r\n            }\r\n        }\r\n\r\n        return $Block;\r\n    }\r\n\r\n    protected function blockHeader($Line)\r\n    {\r\n        return $this->safeHeader(\r\n            parent::blockHeader($Line)\r\n        );\r\n    }\r\n\r\n    protected function blockSetextHeader($Line, array $Block = null)\r\n    {\r\n        return $this->safeHeader(\r\n            parent::blockSetextHeader($Line, $Block)\r\n        );\r\n    }\r\n}\r\n```"
  }
]
